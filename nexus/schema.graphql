### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Application implements Node {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input ApplicationCreateInput {
  emails: [String!]
}

input ApplicationFilter {
  every: ApplicationWhereInput
  none: ApplicationWhereInput
  some: ApplicationWhereInput
}

input ApplicationOrderByInput {
  createdAt: OrderBy
  id: OrderBy
  updatedAt: OrderBy
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  id: IDFilter
  NOT: ApplicationWhereInput
  OR: [ApplicationWhereInput!]
}

input BooleanFilter {
  equals: Boolean
  in: [Boolean!]
  not: Boolean
  notInt: [Boolean!]
}

type Candidate implements Node {
  createdAt: DateTime
  emails: [String!]
  firstName: String
  headline: String
  id: ID
  lastName: String
  links: [String!]
  phones: [String!]
  updatedAt: DateTime
}

input CandidateCreateInput {
  emails: [String!]
  firstName: String
  headline: String
  lastName: String
  links: [String!]
  phones: [String!]
}

input CandidateUpdateInput {
  emails: [String!]
  firstName: String
  headline: String
  lastName: String
  links: [String!]
  phones: [String!]
}

"""DateTime scalar type"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notInt: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notInt: [Float!]
}

input IDFilter {
  equals: ID
  in: [ID!]
  not: ID
  notInt: [ID!]
}

input IDInput {
  id: ID!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notInt: [Int!]
}

type Mutation {
  ok: Boolean
}

interface Node {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input NullableBooleanFilter {
  equals: Boolean
  in: [Boolean!]
  not: Boolean
  notInt: [Boolean!]
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notInt: [DateTime!]
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notInt: [Float!]
}

input NullableIDFilter {
  equals: ID
  in: [ID!]
  not: ID
  notInt: [ID!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notInt: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String!]
  not: String
  notInt: [String!]
  startsWith: String
}

enum OrderBy {
  asc
  desc
}

type Query {
  account: UserAccount
  application(
    """Node ID"""
    id: ID!
  ): Application
  applications(cursor: ID, skip: Int, take: Int, where: ApplicationWhereInput): [Application!]
  candidates: [Candidate!]
  ok: Boolean
  tag(
    """Node ID"""
    id: ID!
  ): Tag
  tags(
    cursor: ID
    skip: Int
    take: Int

    """Tag filter"""
    where: TagWhereInput
  ): [Tag!]
  user: UserProfile
  workspace: Workspace
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String!]
  not: String
  notInt: [String!]
  startsWith: String
}

type Tag implements Node {
  createdAt: DateTime
  description: String
  id: ID
  name: String!
  types: [TagType!]
  updatedAt: DateTime
}

input TagCreateInput {
  """create input for Tag description field - `String`"""
  description: String

  """create input for Tag name field - `String`"""
  name: String!
}

input TagFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

enum TagType {
  APPLICATION
  CANDIDATE
  JOB
}

input TagUpdateInput {
  """update input for Tag description field - `String`"""
  description: String

  """update input for Tag name field - `String`"""
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  description: StringFilter
  name: StringFilter
  NOT: TagWhereInput
  OR: [TagWhereInput!]
}

type UserAccount implements Node {
  createdAt: DateTime
  email: String!
  id: ID
  updatedAt: DateTime
}

type UserProfile implements Node {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

type Workspace implements Node {
  createdAt: DateTime
  description: String
  id: ID
  name: String!
  updatedAt: DateTime
  website: String
}
